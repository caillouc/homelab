services:
  wg-easy:
    environment:
      - PORT=80
    image: ghcr.io/wg-easy/wg-easy:15
    container_name: wg-easy
    hostname: wg-easy
    volumes:
      - ./config/wg-easy:/etc/wireguard
    ports:
      - "31401:31401/udp"
      - "31401:31401/tcp"
    restart: unless-stopped
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    sysctls:
      - net.ipv4.ip_forward=1
      - net.ipv4.conf.all.src_valid_mark=1
      - net.ipv6.conf.all.disable_ipv6=0
      - net.ipv6.conf.all.forwarding=1
      - net.ipv6.conf.default.forwarding=1
    networks:
      wg-easy:
        ipv4_address: 10.10.0.10
        ipv6_address: fdcc:ad94:bacf:61a3::2a

  caddy:
    build:
      context: .
      dockerfile: config/caddy.dockerfile
    container_name: caddy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "443:443/udp"
    volumes:
      - ./config/caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    env_file:
      - .env
    networks:
      wg-easy:


  dnsmasq:
    image: andyshinn/dnsmasq:latest
    container_name: dnsmasq
    restart: unless-stopped
#   ports:
#     - "53:53/udp"
#     - "53:53/tcp"
    volumes:
      - ./config/dnsmasq.conf:/etc/dnsmasq.conf
    networks:
      wg-easy:
        ipv4_address: 10.10.0.53

  samba:
    image: dperson/samba
    container_name: samba
    restart: unless-stopped
    ports:
      - "137:137/udp"
      - "138:138/udp"
      - "139:139/tcp"
      - "445:445/tcp"
    volumes:
      - /data/shared:/shared
    command: >
      -s "Shared;/shared;yes;no;no"
      -u "$SAMBA_USER;$SAMBA_PASSWORD"
      -p
    env_file:
      - .env

  joplin:
    image: joplin/server:latest
    container_name: joplin
    # ports:
      # - "22300:22300"
    networks:
      wg-easy:
        ipv4_address: 10.10.0.223
    restart: unless-stopped
    environment:
      - APP_PORT=22300
      - APP_BASE_URL=${JOPLIN_BASE_URL}
      - DB_CLIENT=sqlite3
      - SQLITE_DATABASE=/database/joplin.db
      - STORAGE_DRIVER=Type=Filesystem; Path=/data
      - TRANSCRIBE_ENABLED=false
    volumes:
      - /data/joplin/storage:/data
      - /data/joplin/database:/database


  uptime-kuma:
    image: louislam/uptime-kuma:1
    container_name: uptime-kuma
    volumes:
      - ./uptime-kuma-data:/app/data
      - /var/run/docker.sock:/var/run/docker.sock
    # ports:
    #   - 3001:3001
    restart: unless-stopped
    networks:
      wg-easy:
        ipv4_address: 10.10.0.21


# WARNING: To install Immich, follow our guide: https://immich.app/docs/install/docker-compose
# Make sure to use the docker-compose.yml of the current release:
# https://github.com/immich-app/immich/releases/latest/download/docker-compose.yml

  immich-server:
    container_name: immich_server
    image: ghcr.io/immich-app/immich-server:${IMMICH_VERSION:-release}
    # extends:
    #   file: hwaccel.transcoding.yml
    #   service: cpu # set to one of [nvenc, quicksync, rkmpp, vaapi, vaapi-wsl] for accelerated transcoding
    volumes:
      - ${UPLOAD_LOCATION}:/data
      - /etc/localtime:/etc/localtime:ro
    env_file:
      - .env
    # ports:
    #   - '2283:2283'
    depends_on:
      - redis
      - database
    restart: unless-stopped
    networks:
      wg-easy:
        ipv4_address: 10.10.0.13
    healthcheck:
      disable: false

  immich-machine-learning:
    container_name: immich_machine_learning
    # For hardware acceleration, add one of -[armnn, cuda, rocm, openvino, rknn] to the image tag.
    # Example tag: ${IMMICH_VERSION:-release}-cuda
    image: ghcr.io/immich-app/immich-machine-learning:${IMMICH_VERSION:-release}
    # extends: # uncomment this section for hardware acceleration - see https://immich.app/docs/features/ml-hardware-acceleration
    #   file: hwaccel.ml.yml
    #   service: cpu # set to one of [armnn, cuda, rocm, openvino, openvino-wsl, rknn] for accelerated inference - use the `-wsl` version for WSL2 where applicable
    volumes:
      - model-cache:/cache
    env_file:
      - .env
    restart: unless-stopped
    networks:
      wg-easy:
    healthcheck:
      disable: false

  redis:
    container_name: immich_redis
    image: docker.io/valkey/valkey:8-bookworm@sha256:fea8b3e67b15729d4bb70589eb03367bab9ad1ee89c876f54327fc7c6e618571
    healthcheck:
      test: redis-cli ping || exit 1
    networks:
      wg-easy:
    restart: unless-stopped

  database:
    container_name: immich_postgres
    image: ghcr.io/immich-app/postgres:14-vectorchord0.4.3-pgvectors0.2.0@sha256:c44be5f2871c59362966d71eab4268170eb6f5653c0e6170184e72b38ffdf107
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_DB: ${DB_DATABASE_NAME}
      POSTGRES_INITDB_ARGS: '--data-checksums'
      # Uncomment the DB_STORAGE_TYPE: 'HDD' var if your database isn't stored on SSDs
      # DB_STORAGE_TYPE: 'HDD'
    volumes:
      # Do not edit the next line. If you want to change the database storage location on your system, edit the value of DB_DATA_LOCATION in the .env file
      - ${DB_DATA_LOCATION}:/var/lib/postgresql/data
    shm_size: 128mb
    networks:
      wg-easy:
    restart: unless-stopped

networks:
  wg-easy:
    name: wg-easy
    ipam:
      config:
        - subnet: 10.10.0.0/24
        - subnet: fdcc:ad94:bacf:61a3::/64

volumes:
  caddy_data:
  caddy_config:
  model-cache:

# pihole:
#   image: pihole/pihole
#   container_name: pihole
#   environment:
#     - FTLCONF_webserver_api_password='cf Password Manager'
#     - TZ='Europe/Zurich'
#     - FTLCONF_dns_listeningMode='ALL'
#   volumes:
#     - '~/.pihole/etc-pihole:/etc/pihole'
#     - '~/.pihole/etc-dnsmasq.d:/etc/dnsmasq.d'
#   ports:
#     - "53:53/tcp"
#     - "53:53/udp"
#     - "5353:80/tcp"
#   restart: unless-stopped
#   networks:
#     wg-easy:
#       ipv4_address: 10.10.0.53
